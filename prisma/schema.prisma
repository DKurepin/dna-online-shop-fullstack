// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String
  email        String         @unique
  phoneNumber  String         @unique
  password     String
  address      String
  role         Role           @default(USER)
  orders       Order[]
  Subscription Subscription[]
  UserProduct  UserProduct[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  photo        String
  description  String         @default("")
  price        Float
  stock        Int
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   Int
  OrderDetails OrderDetails[]
  UserProduct  UserProduct[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Order {
  id           Int            @id @default(autoincrement())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  totalPrice   Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  status       OrderStatus    @default(PENDING)
  address      String
  orderDetails OrderDetails[]
}

enum OrderStatus {
  PENDING
  CREATED
  DELIVERED
  CANCELED
}

model OrderDetails {
  id         Int     @id @default(autoincrement())
  orderId    Int
  order      Order   @relation(fields: [orderId], references: [id])
  productId  Int
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  unitPrice  Float
  totalPrice Float
  // createdAt  DateTime @default(now())
  // updatedAt  DateTime @updatedAt
}

model Subscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model UserProduct {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}
